<pldl>
    <cfgproductions>
        <item>
            <production> Program -> Functions </production>
        </item>
		<item>
			<production> Functions -> Function Functions </production>
		</item>
		<item>
			<production> Functions -> null </production>
		</item>
		<item>
			<production> Function -> ReturnType FunctionName ( Variables ) InnerBlock </production>
		</item>
		<item>
			<production> ReturnType -> Type </production>
		</item>
		<item>
			<production> Type -> int </production>
		</item>
		<item>
			<production> Type -> void </production>
		</item>
		<item>
			<production> Type -> float </production>
		</item>
		<item>
			<production> FunctionName -> var </production>
		</item>
		<item>
			<production> Variables -> TypedVar CommaVariables </production>
		</item>
		<item>
			<production> CommaVariables -> null </production>
		</item>
		<item>
			<production> Variables -> null </production>
		</item>
		<item>
			<production> CommaVariables -> , Variables </production>
		</item>
		<item>
			<production> TypedVar -> Type var </production>
		</item>
		<item>
			<production> Block -> { Blocks } </production>
		</item>
		<item>
			<production> Blocks -> Block Blocks </production>
		</item>
		<item>
			<production> Blocks -> null </production>
		</item>
		<item>
			<production> Block -> Statement </production>
		</item>
        <item>
			<production> InnerBlock -> { Blocks } </production>
		</item>
		<item>
			<production> Statement -> Defination ; </production>
		</item>
		<item>
			<production> Defination -> Type VarDefinations </production>
		</item>
		<item>
			<production> VarDefinations -> VarDefination CommaVarDefinations </production>
		</item>
		<item>
			<production> CommaVarDefinations -> , VarDefinations </production>
		</item>
		<item>
			<production> CommaVarDefinations -> null </production>
		</item>
		<item>
			<production> VarDefination -> var </production>
		</item>
		<item>
			<production> VarDefination -> ExpressionAssignment </production>
		</item>
		<item>
			<production> Statement -> ForStatement </production>
		</item>
		<item>
			<production> ForStatement -> for ( Expression ; Expression ; Expression ) Block </production>
		</item>
		<item>
			<production> Statement -> IfStatement </production>
		</item>
		<item>
			<production> IfStatement -> if ( Expression ) Block ElseStatement </production>
		</item>
		<item>
			<production> ElseStatement -> null </production>
		</item>
		<item>
			<production> ElseStatement -> else Block </production>
		</item>
		<item>
			<production> Statement -> WhileStatement </production>
		</item>
		<item>
			<production> WhileStatement -> while ( Expression ) Block </production>
		</item>
		<item>
			<production> Statement -> DoWhileStatement </production>
		</item>
		<item>
			<production> DoWhileStatement -> do Block while ( Expression ) </production>
		</item>
		<item>
			<production> Statement -> Expression ; </production>
		</item>
		<item>
			<production> Expression -> FunctionCall </production>
		</item>
		<item>
			<production> FunctionCall -> FunctionName ( Vars ) </production>
		</item>
		<item>
			<production> Vars -> var CommaVars </production>
		</item>
		<item>
			<production> CommaVars -> , Vars </production>
		</item>
		<item>
			<production> CommaVars -> null </production>
		</item>
		<item>
			<production> Expression -> ExpressionAssignment </production>
		</item>
		<item>
			<production> ExpressionAssignment -> ExpressionAssignment = ExpressionComma </production>
		</item>
		<item>
			<production> ExpressionAssignment -> ExpressionComma </production>
		</item>
		<item>
			<production> ExpressionComma -> ExpressionOr CommaExpressionComma </production>
		</item>
		<item>
			<production> CommaExpressionComma -> null </production>
		</item>
		<item>
			<production> CommaExpressionComma -> , ExpressionComma </production>
		</item>
		<item>
			<production> ExpressionOr -> ExpressionOr || ExpressionAnd </production>
		</item>
		<item>
			<production> ExpressionOr -> ExpressionAnd </production>
		</item>
		<item>
			<production> ExpressionAnd -> ExpressionAnd &amp;&amp; ExpressionEqual </production>
		</item>
		<item>
			<production> ExpressionAnd -> ExpressionEqual </production>
		</item>
		<item>
			<production> ExpressionEqual -> ExpressionEqual == ExpressionCompare </production>
		</item>
		<item>
			<production> ExpressionEqual -> ExpressionCompare </production>
		</item>
		<item>
			<production> ExpressionEqual -> ExpressionEqual != ExpressionCompare </production>
		</item>
		<item>
			<production> ExpressionCompare -> ExpressionCompare &gt; ExpressionAdd </production>
		</item>
		<item>
			<production> ExpressionCompare -> ExpressionCompare &lt; ExpressionAdd </production>
		</item>
		<item>
			<production> ExpressionCompare -> ExpressionCompare &lt;= ExpressionAdd </production>
		</item>
		<item>
			<production> ExpressionCompare -> ExpressionCompare &gt;= ExpressionAdd </production>
		</item>
		<item>
			<production> ExpressionCompare -> ExpressionAdd </production>
		</item>
		<item>
			<production> ExpressionAdd -> ExpressionAdd + ExpressionMulti </production>
		</item>
		<item>
			<production> ExpressionAdd -> ExpressionAdd - ExpressionMulti </production>
		</item>
		<item>
			<production> ExpressionAdd -> ExpressionMulti </production>
		</item>
		<item>
			<production> ExpressionMulti -> ExpressionMulti * ExpressionPow </production>
		</item>
		<item>
			<production> ExpressionMulti -> ExpressionMulti / ExpressionPow </production>
		</item>
		<item>
			<production> ExpressionMulti -> ExpressionPow </production>
		</item>
		<item>
			<production> ExpressionPow -> ExpressionPow ^ ExpressionNot </production>
		</item>
		<item>
			<production> ExpressionPow -> ExpressionNot </production>
		</item>
		<item>
			<production> ExpressionNot -> ! ExpressionNot </production>
		</item>
		<item>
			<production> ExpressionNot -> ExpressionPara </production>
		</item>
		<item>
			<production> ExpressionPara -> ( Expression ) </production>
		</item>
		<item>
			<production> ExpressionPara -> var </production>
		</item>
		<item>
			<production> ExpressionPara -> Num </production>
		</item>
		<item>
			<production> Num -> + Num </production>
		</item>
		<item>
			<production> Num -> - Num </production>
		</item>
		<item>
			<production> Num -> num </production>
		</item>
    </cfgproductions>
    <terminators>
        <item>
            <name> num </name>
            <regex> [1-9][0-9]*|0 </regex>
        </item>
		<item>
			<name> var </name>
			<regex> [_a-zA-Z][_a-zA-Z0-9]* </regex>
		</item>
    </terminators>
</pldl>